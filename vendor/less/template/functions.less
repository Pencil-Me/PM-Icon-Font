// text-shadow Full Support Firefox 3.1+, Safari 4+, Chrome 2+, IE9, Opera 9.5+
// text-shadow Partial Support Safari 3.1+
.text-shadow (@x: 0px, @y: 3px, @blur: 5px, @color: rgba(0,0,0,0.2)) {
	text-shadow: @x @y @blur @color;
}
.text-glow (@x: 0px, @blur: 5px, @color: rgba(0,0,0,0.2)) {
    text-shadow:    -1*@x 0 @blur @color,
                    0 @x    @blur @color,  
                    @x 0    @blur @color,  
                    0 -1*@x @blur @color;
}
.inner-text-shadow (@x: 0px, @y: 3px, @blur: 5px, @color: rgba(0,0,0,0.2)) {
	text-shadow: inset @x @y @blur @color;
}
// box-shadow Full Support Firefox 4+, Safari 5.1+, Chrome 10.0+, IE9, Opera 10.5+
// box-shadow Partial Support Firefox 3.5 - 3.6 (-moz prefix), Safari 3.1 - 5.0 & Chrome 4.0 - 9.0 (-webkit prefix)
.box-shadow (@x: 2px, @y: 3px, @blur: 3px, @color: rgba(0,0,0,0.2)) {
  -webkit-box-shadow:   @x @y @blur @color;
  -moz-box-shadow:      @x @y @blur @color;
  box-shadow:           @x @y @blur @color;
}
.drop-shadow (@x: 0, @y: 1px, @blur: 2px, @spread: 0, @color:rgba(0,0,0,0.2)) {
	-webkit-box-shadow:	@x @y @blur @spread @color;
	-moz-box-shadow:	@x @y @blur @spread @color;
	box-shadow:         @x @y @blur @spread @color;
}
.inner-shadow (@x: 0, @y: 1px, @blur: 2px, @spread: 0, @color:rgba(0,0,0,0.2)) {
	-webkit-box-shadow: inset @x @y @blur @spread @color;
	-moz-box-shadow:    inset @x @y @blur @spread @color;
	box-shadow:         inset @x @y @blur @spread @color;
}
.box-glow (@x: 3px, @blur: 3px, @color: rgba(255,255,255,0.2)) {
  -webkit-box-shadow:   @x @x @blur @color, -@x -@x @blur @color, @x -@x @blur @color, -@x @x @blur @color;
  -moz-box-shadow:      @x @x @blur @color, -@x -@x @blur @color, @x -@x @blur @color, -@x @x @blur @color;
  box-shadow:           @x @x @blur @color, -@x -@x @blur @color, @x -@x @blur @color, -@x @x @blur @color;
}
.inner-box-glow (@x: 3px, @blur: 3px, @color: rgba(255,255,255,0.2)) {
  -webkit-box-shadow:   inset @x @x @blur @color,inset -@x -@x @blur @color,inset @x -@x @blur @color,inset -@x @x @blur @color;
  -moz-box-shadow:      inset @x @x @blur @color,inset -@x -@x @blur @color,inset @x -@x @blur @color,inset -@x @x @blur @color;
  box-shadow:           inset @x @x @blur @color,inset -@x -@x @blur @color,inset @x -@x @blur @color,inset -@x @x @blur @color;
}
.box-sizing (@type: border-box) {
	-webkit-box-sizing: @type;
	-moz-box-sizing:    @type;
	box-sizing:         @type;
}

.border-radius (@radius: 5px) {
	-webkit-border-radius: @radius;
	-moz-border-radius:    @radius;
	border-radius:         @radius;

	-moz-background-clip:    padding;
	-webkit-background-clip: padding-box;
	background-clip:         padding-box;
}

.border-radiuses (@topright: 0, @bottomright: 0, @bottomleft: 0, @topleft: 0) {
	-webkit-border-top-right-radius:    @topright;
	-webkit-border-bottom-right-radius: @bottomright;
	-webkit-border-bottom-left-radius:  @bottomleft;
	-webkit-border-top-left-radius:     @topleft;

	-moz-border-radius-topright:        @topright;
	-moz-border-radius-bottomright:     @bottomright;
	-moz-border-radius-bottomleft:      @bottomleft;
	-moz-border-radius-topleft:         @topleft;

	border-top-right-radius:            @topright;
	border-bottom-right-radius:         @bottomright;
	border-bottom-left-radius:          @bottomleft;
	border-top-left-radius:             @topleft;

	-moz-background-clip:    padding; 
	-webkit-background-clip: padding-box; 
	background-clip:         padding-box; 
}

.opacity (@opacity: 0.5) {
	-webkit-opacity: 	@opacity;
	-moz-opacity: 		@opacity;
	opacity: 		@opacity;
}

.gradient (@startColor: white, @endColor: #eee) {
	background-color:   @startColor;
	background-image:   -webkit-gradient(linear, left top, left bottom, from(@startColor), to(@endColor));
	background-image:   -webkit-linear-gradient(top, @startColor, @endColor);
	background-image:   -moz-linear-gradient(top, @startColor, @endColor);
	background-image:   -ms-linear-gradient(top, @startColor, @endColor);
	background-image:   -o-linear-gradient(top, @startColor, @endColor);
	background-image:   linear-gradient(top, @startColor, @endColor);
	background:         -webkit-gradient(linear, left top, left bottom, from(@startColor), to(@endColor));
	background:         -webkit-linear-gradient(top, @startColor, @endColor);
	background:         -moz-linear-gradient(top, @startColor, @endColor);
	background:         -ms-linear-gradient(top, @startColor, @endColor);
	background:         -o-linear-gradient(top, @startColor, @endColor);
	background:         linear-gradient(top, @startColor, @endColor);
}
.horizontal-gradient (@startColor: #eee, @endColor: white) {
 	background-color:   @startColor;
	background-image:   -webkit-gradient(linear, left top, right top, from(@startColor), to(@endColor));
	background-image:   -webkit-linear-gradient(left, @startColor, @endColor);
	background-image:   -moz-linear-gradient(left, @startColor, @endColor);
	background-image:   -ms-linear-gradient(left, @startColor, @endColor);
	background-image:   -o-linear-gradient(left, @startColor, @endColor);
	background-image:   linear-gradient(left, @startColor, @endColor);
	background:         -webkit-gradient(linear, left top, right top, from(@startColor), to(@endColor));
	background:         -webkit-linear-gradient(left, @startColor, @endColor);
	background:         -moz-linear-gradient(left, @startColor, @endColor);
	background:         -ms-linear-gradient(left, @startColor, @endColor);
	background:         -o-linear-gradient(left, @startColor, @endColor);
	background:         linear-gradient(left, @startColor, @endColor);
}

.animation (@name, @duration: 300ms, @delay: 0, @ease: ease) {
	-webkit-animation: @name @duration @delay @ease;
	-moz-animation:    @name @duration @delay @ease;
	-ms-animation:     @name @duration @delay @ease;
}

.transition (@props: all; 
             @duration:0.5s; 
             @delay: 0s; 
             @timing: ease; 
             @compact: true;
             @raw-input: false) {
  .output() when (@raw-input = false) and not (@compact = true) {
  -webkit-transition-property:@props; 
     -moz-transition-property:@props;
      -ms-transition-property:@props;
       -o-transition-property:@props; 
          transition-property:@props;
  -webkit-transition-duration:@duration; 
     -moz-transition-duration:@duration;
      -ms-transition-duration:@duration;
       -o-transition-duration:@duration; 
          transition-duration:@duration;
  -webkit-transition-delay:   @delay; 
     -moz-transition-delay:   @delay;
      -ms-transition-delay:   @delay;
       -o-transition-delay:   @delay; 
          transition-delay:   @delay;
  -webkit-transition-timing-function:@timing; 
     -moz-transition-timing-function:@timing;
      -ms-transition-timing-function:@timing;
       -o-transition-timing-function:@timing; 
          transition-timing-function:@timing;
  }
  .output() when (@raw-input = false) and (@compact = true) {
    @propsLength: length(@props);
    @durationLength: length(@duration);
    @delayLength: length(@delay);
    @timingLength: length(@timing);
    .buildString(@i, @s: ~'') when (@i <= @propsLength) {
      @prop: extract(@props, @i);
      .setDuration() when (@i <= @durationLength) {
        @dur: extract(@duration, @i);
      }
      .setDuration() when (@i > @durationLength) {
        @dur: extract(@duration, @durationLength);
      }
      .setDuration();
      .setDelay() when (@i <= @delayLength) {
        @del: extract(@delay, @i);
      }
      .setDelay() when (@i > @delayLength) {
        @del: extract(@delay, @delayLength);
      }
      .setDelay();
      .setTiming() when (@i <= @timingLength) {
        @time: extract(@timing, @i);
      }
      .setTiming() when (@i > @timingLength) {
        @time: extract(@timing, @timingLength);
      }
      .setTiming();
      .setDivider() when (@i > 1) {
        @divider: ~'@{s},';
      }
      .setDivider() when (@i = 1) {
        @divider: ~'';
      }
      .setDivider();
      @string: @divider @prop @dur @del @time;
      .buildString((@i + 1), @string);  
    }
    .buildString(1);
    .buildString(@i, @s: ~'') when (@i > @propsLength) {
      .compact(@s);
    }
  }
  .output() when not (@raw-input = false) {
    .compact(@raw-input);
  }
  .compact(@string) {
    -webkit-transition:@string; 
       -moz-transition:@string;
        -ms-transition:@string;
         -o-transition:@string; 
            transition:@string;    
  }
  .output();
} 
.transform(@string){
	-webkit-transform: @string;
	-moz-transform: 	 @string;
	-ms-transform: 		 @string;
	-o-transform: 		 @string;
}
.scale (@factor) {
	-webkit-transform: scale(@factor);
	-moz-transform: 	 scale(@factor);
	-ms-transform: 		 scale(@factor);
	-o-transform: 		 scale(@factor);
}
.rotate (@deg) {
	-webkit-transform: rotate(@deg);
	-moz-transform: 	 rotate(@deg);
	-ms-transform: 		 rotate(@deg);
	-o-transform: 		 rotate(@deg);
}
.skew (@deg, @deg2) {
	-webkit-transform:   skew(@deg, @deg2);
	-moz-transform: 	 skew(@deg, @deg2);
	-ms-transform: 		 skew(@deg, @deg2);
	-o-transform: 		 skew(@deg, @deg2);
}
.translate (@x, @y:0) {
	-webkit-transform:      translate(@x, @y);
	-moz-transform: 	    translate(@x, @y);
	-ms-transform: 		    translate(@x, @y);
	-o-transform: 		    translate(@x, @y);
}
.translate3d (@x, @y: 0, @z: 0) {
	-webkit-transform:      translate3d(@x, @y, @z);
	-moz-transform: 	    translate3d(@x, @y, @z);
	-ms-transform: 		    translate3d(@x, @y, @z);
	-o-transform: 		    translate3d(@x, @y, @z);
}
.perspective (@value: 1000) {
	-webkit-perspective:    @value;
	-moz-perspective: 	    @value;
	-ms-perspective: 	    @value;
	perspective: 		    @value;
}
.transform-origin (@x:center, @y:center) {
	-webkit-transform-origin: @x @y;
	-moz-transform-origin:    @x @y;
	-ms-transform-origin:     @x @y;
	-o-transform-origin:      @x @y;
}
.columns (@count: 2, @width: 48%) {
    -moz-column-count:      @count;
    -webkit-column-count:   @count;
    column-count:           @count;
 
    -moz-column-width:      @width;
    -webkit-column-width:   @width;
    column-width:           @width;

    columns:                @count @width;
}
.flexbox () {
    /*  As of August 2012, only supported in Chrome 21+ */
	display: -webkit-box;      /* OLD - iOS 6-, Safari 3.1-6 */
	display: -moz-box;         /* OLD - Firefox 19- (buggy but mostly works) */
	display: -ms-flexbox;      /* TWEENER - IE 10 */
	display: -webkit-flex;
	display: flex;
	-webkit-flex-direction: row;
	flex-direction: row;
	-webkit-flex-wrap: wrap;
	flex-wrap: wrap;
	align-items: flex-start;
}
.reflect (@length: 50%, @opacity: 0.2){
    -webkit-box-reflect: below 0px -webkit-gradient(linear, left top, left bottom, from(transparent), color-stop(@length, transparent), to(rgba(255,255,255,@opacity)));
}